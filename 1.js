console.log("Завдання: 1 ==============================");

// Функція task1 не приймає жодних аргументів
function task1() {
  /**
   * Функція `getData` симулює отримання даних з асинхронного джерела,такого як запит до бази даних або API.
   *
   *  @param {object} data - вхідні дані.
   *  @param {number} timeout - час в мілісекундах, який витрачається на отримання даних,за замовчуванням 2000мс.
   *  @returns {Promise} - проміс, який повертає дані або помилку.
  */
   function getData(data, timeout = 2000) {
    return new Promise((resolve, reject) => {
      // setTimeout симулює затримку отримання даних
      setTimeout(() => {
        if (Object.keys(data).length > 0) {
          resolve(data); // Викликаємо resolve з даними, якщо об'єкт не пустий
        } else {
          reject(new Error("Об'єкт пустий")); // Викликаємо reject з помилкою, якщо об'єкт пустий
        }
      }, timeout);
    });
  }

  // Ми викликаємо getData з об'єктом { name: "John", age: 30, city: "New York" } і часом очікування 2000
  const inputData = { name: "John", age: 30, city: "New York" };
  getData(inputData)
    .then((result) => {
      console.log("Отримані дані:", result); // У разі успіху виводимо отримані дані в консоль
    })
    .catch((error) => {
      console.error("Помилка:", error.message); // У разі помилки виводимо повідомлення про помилку в консоль
    })
    .finally(() => {
      console.log("Завдання 1 завершено"); // Незалежно від результату проміса виводимо "Завдання 1 завершено" в консоль
    });
  // Ми обробляємо дані, повернуті промісом
  // У разі успіху виводимо в консоль дані
  // У разі помилки виводимо повідомлення помилки
  // Незалежно від того, завершилось виконання проміса успіхом чи ні виводимо в консоль "Завдання 1 завершено"
}

// Викликаємо функцію task1
task1();
